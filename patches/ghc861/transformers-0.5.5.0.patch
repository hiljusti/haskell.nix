diff -ur hackage-package-transformers-0.5.5.0/Control/Applicative/Backwards.hs ghc-package-transformers-0.5.5.0/Control/Applicative/Backwards.hs
--- hackage-package-transformers-0.5.5.0/Control/Applicative/Backwards.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Applicative/Backwards.hs	2001-09-09 09:46:40.000000000 +0800
@@ -27,6 +27,9 @@
   ) where
 
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Prelude hiding (foldr, foldr1, foldl, foldl1, null, length)
 import Control.Applicative
@@ -100,3 +103,10 @@
     {-# INLINE traverse #-}
     sequenceA (Backwards t) = fmap Backwards (sequenceA t)
     {-# INLINE sequenceA #-}
+
+#if MIN_VERSION_base(4,12,0)
+-- | Derived instance.
+instance Contravariant f => Contravariant (Backwards f) where
+    contramap f = Backwards . contramap f . forwards
+    {-# INLINE contramap #-}
+#endif
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Class.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Class.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Class.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Class.hs	2001-09-09 09:46:40.000000000 +0800
@@ -113,7 +113,13 @@
 
 {- $example1
 
-One might define a parsing monad by adding a state (the 'String' remaining
+The first example is a parser monad in the style of
+
+* \"Monadic parsing in Haskell\", by Graham Hutton and Erik Meijer,
+/Journal of Functional Programming/ 8(4):437-444, July 1998
+(<http://www.cs.nott.ac.uk/~pszgmh/bib.html#pearl>).
+
+We can define such a parser monad by adding a state (the 'String' remaining
 to be parsed) to the @[]@ monad, which provides non-determinism:
 
 > import Control.Monad.Trans.State
@@ -189,7 +195,8 @@
 {- $example3
 
 This example is a cut-down version of the one in
-\"Monad Transformers and Modular Interpreters\",
+
+* \"Monad Transformers and Modular Interpreters\",
 by Sheng Liang, Paul Hudak and Mark Jones in /POPL'95/
 (<http://web.cecs.pdx.edu/~mpj/pubs/modinterp.html>).
 
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Error.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Error.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Error.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Error.hs	2001-09-09 09:46:40.000000000 +0800
@@ -58,6 +58,9 @@
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 import Control.Exception (IOException)
@@ -263,6 +266,11 @@
 instance (Error e, MonadIO m) => MonadIO (ErrorT e m) where
     liftIO = lift . liftIO
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (ErrorT e m) where
+    contramap f = ErrorT . contramap (fmap f) . runErrorT
+#endif
+
 -- | Signal an error value @e@.
 --
 -- * @'runErrorT' ('throwError' e) = 'return' ('Left' e)@
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Except.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Except.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Except.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Except.hs	2001-09-09 09:46:40.000000000 +0800
@@ -15,7 +15,7 @@
 -- Stability   :  experimental
 -- Portability :  portable
 --
--- This monad transformer extends a monad with the ability throw exceptions.
+-- This monad transformer extends a monad with the ability to throw exceptions.
 --
 -- A sequence of actions terminates normally, producing a value,
 -- only if none of the actions in the sequence throws an exception.
@@ -51,6 +51,9 @@
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -255,6 +258,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (ExceptT e m) where
+    contramap f = ExceptT . contramap (fmap f) . runExceptT
+    {-# INLINE contramap #-}
+#endif
+
 -- | Signal an exception value @e@.
 --
 -- * @'runExceptT' ('throwE' e) = 'return' ('Left' e)@
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Identity.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Identity.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Identity.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Identity.hs	2001-09-09 09:46:40.000000000 +0800
@@ -36,6 +36,9 @@
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class (MonadTrans(lift))
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 import Control.Monad (MonadPlus(mzero, mplus))
@@ -154,6 +157,12 @@
     lift = IdentityT
     {-# INLINE lift #-}
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant f => Contravariant (IdentityT f) where
+    contramap f = IdentityT . contramap f . runIdentityT
+    {-# INLINE contramap #-}
+#endif
+
 -- | Lift a unary operation to the new monad.
 mapIdentityT :: (m a -> n b) -> IdentityT m a -> IdentityT n b
 mapIdentityT f = IdentityT . f . runIdentityT
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/List.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/List.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/List.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/List.hs	2001-09-09 09:46:40.000000000 +0800
@@ -34,12 +34,16 @@
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 import Control.Monad
 #if MIN_VERSION_base(4,9,0)
 import qualified Control.Monad.Fail as Fail
 #endif
+import Control.Monad.Fix
 #if MIN_VERSION_base(4,4,0)
 import Control.Monad.Zip (MonadZip(mzipWith))
 #endif
@@ -137,6 +141,12 @@
         return (a ++ b)
     {-# INLINE mplus #-}
 
+instance (MonadFix m) => MonadFix (ListT m) where
+    mfix f = ListT $ mfix (runListT . f . head) >>= \ xs -> case xs of
+        [] -> pure []
+        x:_ -> (x:) <$> (runListT . mfix) ((mapListT . fmap) tail . f)
+    {-# INLINE mfix #-}
+
 instance MonadTrans ListT where
     lift m = ListT $ do
         a <- m
@@ -153,6 +163,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (ListT m) where
+    contramap f = ListT . contramap (fmap f) . runListT
+    {-# INLINE contramap #-}
+#endif
+
 -- | Lift a @callCC@ operation to the new monad.
 liftCallCC :: CallCC m [a] [b] -> CallCC (ListT m) a b
 liftCallCC callCC f = ListT $
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs	2001-09-09 09:46:40.000000000 +0800
@@ -45,6 +45,9 @@
 import Control.Monad.Trans.Class
 import Control.Monad.Trans.Except (ExceptT(..))
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 import Control.Monad (MonadPlus(mzero, mplus), liftM)
@@ -202,6 +205,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (MaybeT m) where
+    contramap f = MaybeT . contramap (fmap f) . runMaybeT
+    {-# INLINE contramap #-}
+#endif
+
 -- | Lift a @callCC@ operation to the new monad.
 liftCallCC :: CallCC m (Maybe a) (Maybe b) -> CallCC (MaybeT m) a b
 liftCallCC callCC f =
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs	2001-09-09 09:46:40.000000000 +0800
@@ -63,6 +63,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -231,6 +234,13 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (RWST r w s m) where
+    contramap f m = RWST $ \r s ->
+      contramap (\ ~(a, s', w) -> (f a, s', w)) $ runRWST m r s
+    {-# INLINE contramap #-}
+#endif
+
 -- ---------------------------------------------------------------------------
 -- Reader operations
 
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs	2001-09-09 09:46:40.000000000 +0800
@@ -63,6 +63,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -231,6 +234,13 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (RWST r w s m) where
+    contramap f m = RWST $ \r s ->
+      contramap (\ (a, s', w) -> (f a, s', w)) $ runRWST m r s
+    {-# INLINE contramap #-}
+#endif
+
 -- ---------------------------------------------------------------------------
 -- Reader operations
 
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Reader.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Reader.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Reader.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Reader.hs	2001-09-09 09:46:40.000000000 +0800
@@ -49,6 +49,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -207,6 +210,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (ReaderT r m) where
+    contramap f = ReaderT . fmap (contramap f) . runReaderT
+    {-# INLINE contramap #-}
+#endif
+
 liftReaderT :: m a -> ReaderT r m a
 liftReaderT m = ReaderT (const m)
 {-# INLINE liftReaderT #-}
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs	2001-09-09 09:46:40.000000000 +0800
@@ -76,6 +76,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -253,6 +256,13 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (StateT s m) where
+    contramap f m = StateT $ \s ->
+      contramap (\ ~(a, s') -> (f a, s')) $ runStateT m s
+    {-# INLINE contramap #-}
+#endif
+
 -- | Fetch the current value of the state within the monad.
 get :: (Monad m) => StateT s m s
 get = state $ \ s -> (s, s)
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs	2001-09-09 09:46:40.000000000 +0800
@@ -73,6 +73,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Signatures
 import Control.Monad.Trans.Class
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -250,6 +253,13 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (StateT s m) where
+    contramap f m = StateT $ \s ->
+      contramap (\ (a, s') -> (f a, s')) $ runStateT m s
+    {-# INLINE contramap #-}
+#endif
+
 -- | Fetch the current value of the state within the monad.
 get :: (Monad m) => StateT s m s
 get = state $ \ s -> (s, s)
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs	2001-09-09 09:46:40.000000000 +0800
@@ -52,6 +52,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Trans.Class
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -237,6 +240,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (WriterT w m) where
+    contramap f = mapWriterT $ contramap $ \ ~(a, w) -> (f a, w)
+    {-# INLINE contramap #-}
+#endif
+
 -- | @'tell' w@ is an action that produces the output @w@.
 tell :: (Monad m) => w -> WriterT w m ()
 tell w = writer ((), w)
diff -ur hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs
--- hackage-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs	2001-09-09 09:46:40.000000000 +0800
@@ -55,6 +55,9 @@
 import Control.Monad.IO.Class
 import Control.Monad.Trans.Class
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Functor.Identity
 
 import Control.Applicative
@@ -240,6 +243,12 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant m => Contravariant (WriterT w m) where
+    contramap f = mapWriterT $ contramap $ \ (a, w) -> (f a, w)
+    {-# INLINE contramap #-}
+#endif
+
 -- | @'tell' w@ is an action that produces the output @w@.
 tell :: (Monad m) => w -> WriterT w m ()
 tell w = writer ((), w)
diff -ur hackage-package-transformers-0.5.5.0/Data/Functor/Constant.hs ghc-package-transformers-0.5.5.0/Data/Functor/Constant.hs
--- hackage-package-transformers-0.5.5.0/Data/Functor/Constant.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Data/Functor/Constant.hs	2001-09-09 09:46:40.000000000 +0800
@@ -26,6 +26,9 @@
   ) where
 
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 import Data.Foldable
@@ -141,3 +144,9 @@
     bitraverse f _ (Constant a) = Constant <$> f a
     {-# INLINE bitraverse #-}
 #endif
+
+#if MIN_VERSION_base(4,12,0)
+instance Contravariant (Constant a) where
+    contramap _ (Constant a) = Constant a
+    {-# INLINE contramap #-}
+#endif
diff -ur hackage-package-transformers-0.5.5.0/Data/Functor/Reverse.hs ghc-package-transformers-0.5.5.0/Data/Functor/Reverse.hs
--- hackage-package-transformers-0.5.5.0/Data/Functor/Reverse.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/Data/Functor/Reverse.hs	2001-09-09 09:46:40.000000000 +0800
@@ -28,6 +28,9 @@
 
 import Control.Applicative.Backwards
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Prelude hiding (foldr, foldr1, foldl, foldl1, null, length)
 import Control.Applicative
@@ -129,3 +132,10 @@
     traverse f (Reverse t) =
         fmap Reverse . forwards $ traverse (Backwards . f) t
     {-# INLINE traverse #-}
+
+#if MIN_VERSION_base(4,12,0)
+-- | Derived instance.
+instance Contravariant f => Contravariant (Reverse f) where
+    contramap f = Reverse . contramap f . getReverse
+    {-# INLINE contramap #-}
+#endif
diff -ur hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Compose.hs ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Compose.hs
--- hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Compose.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Compose.hs	2001-09-09 09:46:40.000000000 +0800
@@ -35,6 +35,9 @@
   ) where
 
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 
 import Control.Applicative
 #if __GLASGOW_HASKELL__ >= 708
@@ -144,3 +147,8 @@
 instance (Alternative f, Applicative g) => Alternative (Compose f g) where
     empty = Compose empty
     Compose x <|> Compose y = Compose (x <|> y)
+
+#if MIN_VERSION_base(4,12,0)
+instance (Functor f, Contravariant g) => Contravariant (Compose f g) where
+    contramap f (Compose fga) = Compose (fmap (contramap f) fga)
+#endif
diff -ur hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Product.hs ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Product.hs
--- hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Product.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Product.hs	2001-09-09 09:46:40.000000000 +0800
@@ -45,6 +45,9 @@
 #endif
 import Data.Foldable (Foldable(foldMap))
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Monoid (mappend)
 import Data.Traversable (Traversable(traverse))
 #if __GLASGOW_HASKELL__ >= 702
@@ -146,3 +149,8 @@
 instance (MonadZip f, MonadZip g) => MonadZip (Product f g) where
     mzipWith f (Pair x1 y1) (Pair x2 y2) = Pair (mzipWith f x1 x2) (mzipWith f y1 y2)
 #endif
+
+#if MIN_VERSION_base(4,12,0)
+instance (Contravariant f, Contravariant g) => Contravariant (Product f g) where
+    contramap f (Pair a b) = Pair (contramap f a) (contramap f b)
+#endif
diff -ur hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Sum.hs ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Sum.hs
--- hackage-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Sum.hs	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/legacy/pre711/Data/Functor/Sum.hs	2001-09-09 09:46:40.000000000 +0800
@@ -40,6 +40,9 @@
 #endif
 import Data.Foldable (Foldable(foldMap))
 import Data.Functor.Classes
+#if MIN_VERSION_base(4,12,0)
+import Data.Functor.Contravariant
+#endif
 import Data.Monoid (mappend)
 import Data.Traversable (Traversable(traverse))
 #if __GLASGOW_HASKELL__ >= 702
@@ -125,3 +128,9 @@
 instance (Traversable f, Traversable g) => Traversable (Sum f g) where
     traverse f (InL x) = InL <$> traverse f x
     traverse f (InR y) = InR <$> traverse f y
+
+#if MIN_VERSION_base(4,12,0)
+instance (Contravariant f, Contravariant g) => Contravariant (Sum f g) where
+    contramap f (InL xs) = InL (contramap f xs)
+    contramap f (InR ys) = InR (contramap f ys)
+#endif
diff -ur hackage-package-transformers-0.5.5.0/transformers.cabal ghc-package-transformers-0.5.5.0/transformers.cabal
--- hackage-package-transformers-0.5.5.0/transformers.cabal	2017-10-04 23:58:48.000000000 +0800
+++ ghc-package-transformers-0.5.5.0/transformers.cabal	2001-09-09 09:46:40.000000000 +0800
@@ -9,7 +9,9 @@
 synopsis:     Concrete functor and monad transformers
 description:
     A portable library of functor and monad transformers, inspired by
-    the paper \"Functional Programming with Overloading and Higher-Order
+    the paper
+    .
+    * \"Functional Programming with Overloading and Higher-Order
     Polymorphism\", by Mark P Jones,
     in /Advanced School of Functional Programming/, 1995
     (<http://web.cecs.pdx.edu/~mpj/pubs/springschool.html>).
