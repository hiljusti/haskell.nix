diff --git a/Data/Vector.hs b/Data/Vector.hs
index db6dfb7..797e096 100644
--- a/Data/Vector.hs
+++ b/Data/Vector.hs
@@ -150,7 +150,7 @@ module Data.Vector (
   -- * Conversions
 
   -- ** Lists
-  toList, fromList, fromListN,
+  toList, Data.Vector.fromList, Data.Vector.fromListN,
 
   -- ** Other vector types
   G.convert,
@@ -187,11 +187,14 @@ import Data.Typeable ( Typeable )
 import Data.Data     ( Data(..) )
 import Text.Read     ( Read(..), readListPrecDefault )
 
-import Data.Monoid   ( Monoid(..) )
 import qualified Control.Applicative as Applicative
 import qualified Data.Foldable as Foldable
 import qualified Data.Traversable as Traversable
 
+#if !MIN_VERSION_base(4,8,0)
+import Data.Monoid   ( Monoid(..) )
+#endif
+
 #if __GLASGOW_HASKELL__ >= 708
 import qualified GHC.Exts as Exts (IsList(..))
 #endif
@@ -220,8 +223,8 @@ instance Read a => Read (Vector a) where
 
 instance Exts.IsList (Vector a) where
   type Item (Vector a) = a
-  fromList = fromList
-  fromListN = fromListN
+  fromList = Data.Vector.fromList
+  fromListN = Data.Vector.fromListN
   toList = toList
 #endif
 
@@ -297,7 +300,7 @@ instance Functor Vector where
 
 instance Monad Vector where
   {-# INLINE return #-}
-  return = singleton
+  return = Applicative.pure
 
   {-# INLINE (>>=) #-}
   (>>=) = flip concatMap
@@ -341,7 +344,7 @@ instance Foldable.Foldable Vector where
 
 instance Traversable.Traversable Vector where
   {-# INLINE traverse #-}
-  traverse f xs = fromList Applicative.<$> Traversable.traverse f (toList xs)
+  traverse f xs = Data.Vector.fromList Applicative.<$> Traversable.traverse f (toList xs)
 
   {-# INLINE mapM #-}
   mapM = mapM
@@ -917,7 +920,7 @@ imapM_ :: Monad m => (Int -> a -> m b) -> Vector a -> m ()
 imapM_ = G.imapM_
 
 -- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a
--- vector of results. Equvalent to @flip 'mapM'@.
+-- vector of results. Equivalent to @flip 'mapM'@.
 forM :: Monad m => Vector a -> (a -> m b) -> m (Vector b)
 {-# INLINE forM #-}
 forM = G.forM
diff --git a/Data/Vector/Fusion/Bundle.hs b/Data/Vector/Fusion/Bundle.hs
index 53bddda..aeb2945 100644
--- a/Data/Vector/Fusion/Bundle.hs
+++ b/Data/Vector/Fusion/Bundle.hs
@@ -111,7 +111,7 @@ type Bundle = M.Bundle Id
 type MBundle = M.Bundle
 
 inplace :: (forall m. Monad m => S.Stream m a -> S.Stream m b)
-	-> (Size -> Size) -> Bundle v a -> Bundle v b
+        -> (Size -> Size) -> Bundle v a -> Bundle v b
 {-# INLINE_FUSED inplace #-}
 inplace f g b = b `seq` M.fromStream (f (M.elements b)) (g (M.size b))
 
diff --git a/Data/Vector/Fusion/Bundle/Monadic.hs b/Data/Vector/Fusion/Bundle/Monadic.hs
index 66789d9..9f9a81a 100644
--- a/Data/Vector/Fusion/Bundle/Monadic.hs
+++ b/Data/Vector/Fusion/Bundle/Monadic.hs
@@ -101,12 +101,20 @@ import Prelude hiding ( length, null,
                         scanl, scanl1,
                         enumFromTo, enumFromThenTo )
 
-import Data.Int  ( Int8, Int16, Int32, Int64 )
-import Data.Word ( Word8, Word16, Word32, Word, Word64 )
+import Data.Int  ( Int8, Int16, Int32 )
+import Data.Word ( Word8, Word16, Word32, Word64 )
+
+#if !MIN_VERSION_base(4,8,0)
+import Data.Word ( Word )
+#endif
 
 #include "vector.h"
 #include "MachDeps.h"
 
+#if WORD_SIZE_IN_BITS > 32
+import Data.Int  ( Int64 )
+#endif
+
 data Chunk v a = Chunk Int (forall m. (PrimMonad m, Vector v a) => Mutable v (PrimState m) a -> m ())
 
 -- | Monadic streams
@@ -888,6 +896,7 @@ enumFromTo_big_word x y = x `seq` y `seq` fromStream (Stream step x) (Exact (len
                         :: Monad m => Integer -> Integer -> Bundle m v Integer   #-}
 
 
+#if WORD_SIZE_IN_BITS > 32
 
 -- FIXME: the "too large" test is totally wrong
 enumFromTo_big_int :: (Integral a, Monad m) => a -> a -> Bundle m v a
@@ -906,7 +915,6 @@ enumFromTo_big_int x y = x `seq` y `seq` fromStream (Stream step x) (Exact (len
     step z | z <= y    = return $ Yield z (z+1)
            | otherwise = return $ Done
 
-#if WORD_SIZE_IN_BITS > 32
 
 {-# RULES
 
diff --git a/Data/Vector/Fusion/Stream/Monadic.hs b/Data/Vector/Fusion/Stream/Monadic.hs
index a0c13e4..7297587 100644
--- a/Data/Vector/Fusion/Stream/Monadic.hs
+++ b/Data/Vector/Fusion/Stream/Monadic.hs
@@ -89,8 +89,12 @@ import Prelude hiding ( length, null,
                         scanl, scanl1,
                         enumFromTo, enumFromThenTo )
 
-import Data.Int  ( Int8, Int16, Int32, Int64 )
+import Data.Int  ( Int8, Int16, Int32 )
+import Data.Word ( Word8, Word16, Word32, Word64 )
+
+#if !MIN_VERSION_base(4,8,0)
 import Data.Word ( Word8, Word16, Word32, Word, Word64 )
+#endif
 
 #if __GLASGOW_HASKELL__ >= 708
 import GHC.Types ( SPEC(..) )
@@ -101,6 +105,10 @@ import GHC.Exts ( SpecConstrAnnotation(..) )
 #include "vector.h"
 #include "MachDeps.h"
 
+#if WORD_SIZE_IN_BITS > 32
+import Data.Int  ( Int64 )
+#endif
+
 #if __GLASGOW_HASKELL__ < 708
 data SPEC = SPEC | SPEC2
 #if __GLASGOW_HASKELL__ >= 700
@@ -1403,6 +1411,8 @@ enumFromTo_big_word x y = x `seq` y `seq` Stream step x
 
 
 
+#if WORD_SIZE_IN_BITS > 32
+
 -- FIXME: the "too large" test is totally wrong
 enumFromTo_big_int :: (Integral a, Monad m) => a -> a -> Stream m a
 {-# INLINE_FUSED enumFromTo_big_int #-}
@@ -1412,8 +1422,6 @@ enumFromTo_big_int x y = x `seq` y `seq` Stream step x
     step z | z <= y    = return $ Yield z (z+1)
            | otherwise = return $ Done
 
-#if WORD_SIZE_IN_BITS > 32
-
 {-# RULES
 
 "enumFromTo<Int64> [Stream]"
diff --git a/Data/Vector/Fusion/Util.hs b/Data/Vector/Fusion/Util.hs
index 50f6b4d..855bf5d 100644
--- a/Data/Vector/Fusion/Util.hs
+++ b/Data/Vector/Fusion/Util.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 -- |
 -- Module      : Data.Vector.Fusion.Util
 -- Copyright   : (c) Roman Leshchinskiy 2009
@@ -16,7 +17,9 @@ module Data.Vector.Fusion.Util (
   delay_inline, delayed_min
 ) where
 
+#if !MIN_VERSION_base(4,8,0)
 import Control.Applicative (Applicative(..))
+#endif
 
 -- | Identity monad
 newtype Id a = Id { unId :: a }
@@ -29,7 +32,7 @@ instance Applicative Id where
   Id f <*> Id x = Id (f x)
 
 instance Monad Id where
-  return     = Id
+  return = pure
   Id x >>= f = f x
 
 -- | Box monad
@@ -43,7 +46,7 @@ instance Applicative Box where
   Box f <*> Box x = Box (f x)
 
 instance Monad Box where
-  return      = Box
+  return = pure
   Box x >>= f = f x
 
 -- | Delay inlining a function until late in the game (simplifier phase 0).
@@ -55,4 +58,3 @@ delay_inline f = f
 delayed_min :: Int -> Int -> Int
 {-# INLINE [0] delayed_min #-}
 delayed_min m n = min m n
-
diff --git a/Data/Vector/Generic.hs b/Data/Vector/Generic.hs
index 478a75a..a299d86 100644
--- a/Data/Vector/Generic.hs
+++ b/Data/Vector/Generic.hs
@@ -1038,7 +1038,7 @@ imapM_ :: (Monad m, Vector v a) => (Int -> a -> m b) -> v a -> m ()
 imapM_ f = Bundle.mapM_ (uncurry f) . Bundle.indexed . stream
 
 -- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a
--- vector of results. Equvalent to @flip 'mapM'@.
+-- vector of results. Equivalent to @flip 'mapM'@.
 forM :: (Monad m, Vector v a, Vector v b) => v a -> (a -> m b) -> m (v b)
 {-# INLINE forM #-}
 forM as f = mapM f as
diff --git a/Data/Vector/Generic/Mutable.hs b/Data/Vector/Generic/Mutable.hs
index c174c71..e3d02bd 100644
--- a/Data/Vector/Generic/Mutable.hs
+++ b/Data/Vector/Generic/Mutable.hs
@@ -584,7 +584,7 @@ new :: (PrimMonad m, MVector v a) => Int -> m (v (PrimState m) a)
 new n = BOUNDS_CHECK(checkLength) "new" n
       $ unsafeNew n >>= \v -> basicInitialize v >> return v
 
--- | Create a mutable vector of the given length. The length is not checked.
+-- | Create a mutable vector of the given length. The memory is not initialized.
 unsafeNew :: (PrimMonad m, MVector v a) => Int -> m (v (PrimState m) a)
 {-# INLINE unsafeNew #-}
 unsafeNew n = UNSAFE_CHECK(checkLength) "unsafeNew" n
diff --git a/Data/Vector/Mutable.hs b/Data/Vector/Mutable.hs
index d1af9de..e3498ca 100644
--- a/Data/Vector/Mutable.hs
+++ b/Data/Vector/Mutable.hs
@@ -268,7 +268,7 @@ new :: PrimMonad m => Int -> m (MVector (PrimState m) a)
 {-# INLINE new #-}
 new = G.new
 
--- | Create a mutable vector of the given length. The length is not checked.
+-- | Create a mutable vector of the given length. The memory is not initialized.
 unsafeNew :: PrimMonad m => Int -> m (MVector (PrimState m) a)
 {-# INLINE unsafeNew #-}
 unsafeNew = G.unsafeNew
diff --git a/Data/Vector/Primitive.hs b/Data/Vector/Primitive.hs
index 251b595..7f653b1 100644
--- a/Data/Vector/Primitive.hs
+++ b/Data/Vector/Primitive.hs
@@ -164,7 +164,9 @@ import Data.Typeable ( Typeable )
 import Data.Data     ( Data(..) )
 import Text.Read     ( Read(..), readListPrecDefault )
 
+#if !MIN_VERSION_base(4,8,0)
 import Data.Monoid   ( Monoid(..) )
+#endif
 
 #if __GLASGOW_HASKELL__ >= 708
 import qualified GHC.Exts as Exts
@@ -773,7 +775,7 @@ mapM_ :: (Monad m, Prim a) => (a -> m b) -> Vector a -> m ()
 mapM_ = G.mapM_
 
 -- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a
--- vector of results. Equvalent to @flip 'mapM'@.
+-- vector of results. Equivalent to @flip 'mapM'@.
 forM :: (Monad m, Prim a, Prim b) => Vector a -> (a -> m b) -> m (Vector b)
 {-# INLINE forM #-}
 forM = G.forM
diff --git a/Data/Vector/Primitive/Mutable.hs b/Data/Vector/Primitive/Mutable.hs
index 85595ae..2a2eb1e 100644
--- a/Data/Vector/Primitive/Mutable.hs
+++ b/Data/Vector/Primitive/Mutable.hs
@@ -211,7 +211,7 @@ new :: (PrimMonad m, Prim a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE new #-}
 new = G.new
 
--- | Create a mutable vector of the given length. The length is not checked.
+-- | Create a mutable vector of the given length. The memory is not initialized.
 unsafeNew :: (PrimMonad m, Prim a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE unsafeNew #-}
 unsafeNew = G.unsafeNew
diff --git a/Data/Vector/Storable.hs b/Data/Vector/Storable.hs
index 1d0f46e..ae4e4bb 100644
--- a/Data/Vector/Storable.hs
+++ b/Data/Vector/Storable.hs
@@ -169,7 +169,9 @@ import Data.Typeable ( Typeable )
 import Data.Data     ( Data(..) )
 import Text.Read     ( Read(..), readListPrecDefault )
 
+#if !MIN_VERSION_base(4,8,0)
 import Data.Monoid   ( Monoid(..) )
+#endif
 
 #if __GLASGOW_HASKELL__ >= 708
 import qualified GHC.Exts as Exts
@@ -783,7 +785,7 @@ mapM_ :: (Monad m, Storable a) => (a -> m b) -> Vector a -> m ()
 mapM_ = G.mapM_
 
 -- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a
--- vector of results. Equvalent to @flip 'mapM'@.
+-- vector of results. Equivalent to @flip 'mapM'@.
 forM :: (Monad m, Storable a, Storable b) => Vector a -> (a -> m b) -> m (Vector b)
 {-# INLINE forM #-}
 forM = G.forM
diff --git a/Data/Vector/Storable/Mutable.hs b/Data/Vector/Storable/Mutable.hs
index 44688b0..c1c1ac1 100644
--- a/Data/Vector/Storable/Mutable.hs
+++ b/Data/Vector/Storable/Mutable.hs
@@ -1,4 +1,4 @@
-{-# LANGUAGE CPP, DeriveDataTypeable, MultiParamTypeClasses, FlexibleInstances, ScopedTypeVariables #-}
+{-# LANGUAGE CPP, DeriveDataTypeable, FlexibleInstances, MagicHash, MultiParamTypeClasses, ScopedTypeVariables #-}
 
 -- |
 -- Module      : Data.Vector.Storable.Mutable
@@ -65,8 +65,13 @@ import Data.Vector.Storable.Internal
 import Foreign.Storable
 import Foreign.ForeignPtr
 
-#if __GLASGOW_HASKELL__ >= 605
-import GHC.ForeignPtr (mallocPlainForeignPtrBytes)
+#if __GLASGOW_HASKELL__ >= 706
+import GHC.ForeignPtr (mallocPlainForeignPtrAlignedBytes)
+#elif __GLASGOW_HASKELL__ >= 700
+import Data.Primitive.ByteArray (MutableByteArray(..), newAlignedPinnedByteArray,
+                                 unsafeFreezeByteArray)
+import GHC.Prim (byteArrayContents#, unsafeCoerce#)
+import GHC.ForeignPtr
 #endif
 
 import Foreign.Ptr
@@ -201,11 +206,26 @@ storableSetAsPrim n fp x y = withForeignPtr fp $ \(Ptr p) -> do
 {-# INLINE mallocVector #-}
 mallocVector :: Storable a => Int -> IO (ForeignPtr a)
 mallocVector =
-#if __GLASGOW_HASKELL__ >= 605
-    doMalloc undefined
-        where
-          doMalloc :: Storable b => b -> Int -> IO (ForeignPtr b)
-          doMalloc dummy size = mallocPlainForeignPtrBytes (size * sizeOf dummy)
+#if __GLASGOW_HASKELL__ >= 706
+  doMalloc undefined
+  where
+    doMalloc :: Storable b => b -> Int -> IO (ForeignPtr b)
+    doMalloc dummy size =
+      mallocPlainForeignPtrAlignedBytes (size * sizeOf dummy) (alignment dummy)
+#elif __GLASGOW_HASKELL__ >= 700
+  doMalloc undefined
+  where
+    doMalloc :: Storable b => b -> Int -> IO (ForeignPtr b)
+    doMalloc dummy size = do
+      arr@(MutableByteArray arr#) <- newAlignedPinnedByteArray arrSize arrAlign
+      newConcForeignPtr
+        (Ptr (byteArrayContents# (unsafeCoerce# arr#)))
+        -- Keep reference to mutable byte array until whole ForeignPtr goes out
+        -- of scope.
+        (touch arr)
+      where
+        arrSize  = size * sizeOf dummy
+        arrAlign = alignment dummy
 #else
     mallocForeignPtrArray
 #endif
@@ -293,7 +313,7 @@ new :: (PrimMonad m, Storable a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE new #-}
 new = G.new
 
--- | Create a mutable vector of the given length. The length is not checked.
+-- | Create a mutable vector of the given length. The memory is not initialized.
 unsafeNew :: (PrimMonad m, Storable a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE unsafeNew #-}
 unsafeNew = G.unsafeNew
@@ -322,14 +342,14 @@ clone = G.clone
 -- | Grow a vector by the given number of elements. The number must be
 -- positive.
 grow :: (PrimMonad m, Storable a)
-              => MVector (PrimState m) a -> Int -> m (MVector (PrimState m) a)
+     => MVector (PrimState m) a -> Int -> m (MVector (PrimState m) a)
 {-# INLINE grow #-}
 grow = G.grow
 
 -- | Grow a vector by the given number of elements. The number must be
 -- positive but this is not checked.
 unsafeGrow :: (PrimMonad m, Storable a)
-               => MVector (PrimState m) a -> Int -> m (MVector (PrimState m) a)
+           => MVector (PrimState m) a -> Int -> m (MVector (PrimState m) a)
 {-# INLINE unsafeGrow #-}
 unsafeGrow = G.unsafeGrow
 
@@ -401,7 +421,7 @@ set = G.set
 -- | Copy a vector. The two vectors must have the same length and may not
 -- overlap.
 copy :: (PrimMonad m, Storable a)
-                 => MVector (PrimState m) a -> MVector (PrimState m) a -> m ()
+     => MVector (PrimState m) a -> MVector (PrimState m) a -> m ()
 {-# INLINE copy #-}
 copy = G.copy
 
@@ -422,7 +442,7 @@ unsafeCopy = G.unsafeCopy
 -- copied to a temporary vector and then the temporary vector was copied
 -- to the target vector.
 move :: (PrimMonad m, Storable a)
-                 => MVector (PrimState m) a -> MVector (PrimState m) a -> m ()
+     => MVector (PrimState m) a -> MVector (PrimState m) a -> m ()
 {-# INLINE move #-}
 move = G.move
 
@@ -434,9 +454,9 @@ move = G.move
 -- copied to a temporary vector and then the temporary vector was copied
 -- to the target vector.
 unsafeMove :: (PrimMonad m, Storable a)
-                          => MVector (PrimState m) a   -- ^ target
-                          -> MVector (PrimState m) a   -- ^ source
-                          -> m ()
+           => MVector (PrimState m) a   -- ^ target
+           -> MVector (PrimState m) a   -- ^ source
+           -> m ()
 {-# INLINE unsafeMove #-}
 unsafeMove = G.unsafeMove
 
diff --git a/Data/Vector/Unboxed.hs b/Data/Vector/Unboxed.hs
index 1b2062f..1d5f121 100644
--- a/Data/Vector/Unboxed.hs
+++ b/Data/Vector/Unboxed.hs
@@ -186,7 +186,9 @@ import Prelude hiding ( length, null,
 
 import Text.Read     ( Read(..), readListPrecDefault )
 
+#if !MIN_VERSION_base(4,8,0)
 import Data.Monoid   ( Monoid(..) )
+#endif
 
 #if __GLASGOW_HASKELL__ >= 708
 import qualified GHC.Exts as Exts (IsList(..))
@@ -820,7 +822,7 @@ imapM_ :: (Monad m, Unbox a) => (Int -> a -> m b) -> Vector a -> m ()
 imapM_ = G.imapM_
 
 -- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a
--- vector of results. Equvalent to @flip 'mapM'@.
+-- vector of results. Equivalent to @flip 'mapM'@.
 forM :: (Monad m, Unbox a, Unbox b) => Vector a -> (a -> m b) -> m (Vector b)
 {-# INLINE forM #-}
 forM = G.forM
diff --git a/Data/Vector/Unboxed/Base.hs b/Data/Vector/Unboxed/Base.hs
index ee41966..56c6735 100644
--- a/Data/Vector/Unboxed/Base.hs
+++ b/Data/Vector/Unboxed/Base.hs
@@ -30,10 +30,14 @@ import Control.DeepSeq ( NFData(rnf) )
 import Control.Monad.Primitive
 import Control.Monad ( liftM )
 
-import Data.Word ( Word, Word8, Word16, Word32, Word64 )
+import Data.Word ( Word8, Word16, Word32, Word64 )
 import Data.Int  ( Int8, Int16, Int32, Int64 )
 import Data.Complex
 
+#if !MIN_VERSION_base(4,8,0)
+import Data.Word ( Word )
+#endif
+
 #if __GLASGOW_HASKELL__ >= 707
 import Data.Typeable ( Typeable )
 #else
diff --git a/Data/Vector/Unboxed/Mutable.hs b/Data/Vector/Unboxed/Mutable.hs
index 78e473e..a94c07f 100644
--- a/Data/Vector/Unboxed/Mutable.hs
+++ b/Data/Vector/Unboxed/Mutable.hs
@@ -149,7 +149,7 @@ new :: (PrimMonad m, Unbox a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE new #-}
 new = G.new
 
--- | Create a mutable vector of the given length. The length is not checked.
+-- | Create a mutable vector of the given length. The memory is not initialized.
 unsafeNew :: (PrimMonad m, Unbox a) => Int -> m (MVector (PrimState m) a)
 {-# INLINE unsafeNew #-}
 unsafeNew = G.unsafeNew
diff --git a/include/vector.h b/include/vector.h
index df9200c..1568bb2 100644
--- a/include/vector.h
+++ b/include/vector.h
@@ -18,4 +18,3 @@ import qualified Data.Vector.Internal.Check as Ck
 
 #define PHASE_STREAM  Please use "PHASE_FUSED" instead
 #define INLINE_STREAM Please use "INLINE_FUSED" instead
-
diff --git a/tests/Tests/Vector.hs b/tests/Tests/Vector.hs
index 9b0a093..e39d24f 100644
--- a/tests/Tests/Vector.hs
+++ b/tests/Tests/Vector.hs
@@ -643,6 +643,7 @@ tests = [
         testGroup "Data.Vector.Storable.Vector (Double)" (testNumericStorableVector (undefined :: Data.Vector.Storable.Vector Double)),
 
         testGroup "Data.Vector.Unboxed.Vector ()"       (testUnitUnboxedVector (undefined :: Data.Vector.Unboxed.Vector ())),
+        testGroup "Data.Vector.Unboxed.Vector (Bool)"       (testBoolUnboxedVector (undefined :: Data.Vector.Unboxed.Vector Bool)),
         testGroup "Data.Vector.Unboxed.Vector (Int)"    (testNumericUnboxedVector (undefined :: Data.Vector.Unboxed.Vector Int)),
         testGroup "Data.Vector.Unboxed.Vector (Double)" (testNumericUnboxedVector (undefined :: Data.Vector.Unboxed.Vector Double)),
        testGroup "Data.Vector.Unboxed.Vector (Int,Bool)" (testTupleUnboxedVector (undefined :: Data.Vector.Unboxed.Vector (Int,Bool))),
diff --git a/vector.cabal b/vector.cabal
index ffc5099..d962c72 100644
--- a/vector.cabal
+++ b/vector.cabal
@@ -38,6 +38,7 @@ Cabal-Version:  >=1.10
 Build-Type:     Simple
 
 Extra-Source-Files:
+      changelog
       README.md
       tests/LICENSE
       tests/Setup.hs
@@ -137,9 +138,9 @@ Library
   Install-Includes:
         vector.h
 
-  Build-Depends: base >= 4.3 && < 4.9
+  Build-Depends: base >= 4.3 && < 4.10
                , primitive >= 0.5.0.1 && < 0.7
-               , ghc-prim >= 0.2 && < 0.5
+               , ghc-prim >= 0.2 && < 0.6
                , deepseq >= 1.1 && < 1.5
 
   Ghc-Options: -O2 -Wall -fno-warn-orphans
